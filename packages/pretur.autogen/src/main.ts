import { resolve as pathResolve } from 'path';
import * as helpers from './helpers';
import * as Handlebars from 'handlebars';
import { readFileSync, outputFileSync } from 'fs-extra';
const watchr = require('watchr');

export { safe } from './helpers';

Handlebars.registerHelper(helpers);

const defaultAutogenHeader = `/*
      ===============================================
      |                                             |
      |  AUTO GENERATED FILE! DO NOT EDIT DIRECTLY  |
      |                                             |
      ===============================================
*/

`;

const defaultScaffoldingHeader = `/*
      ===========================================================================================
      |                                                                                         |
      |  This file is a part of scaffolding. DO NOT move it, if you do it will be regenerated.  |
      |                                                                                         |
      ===========================================================================================
*/

`;

export interface Template {
  (context: any): string;
}

export function resolve(...paths: string[]): string {
  return pathResolve(...paths);
}

export function loadFile(absolutePath: string): string {
  return readFileSync(absolutePath, 'utf8');
}

export function loadTemplate(absolutePath: string): Template {
  return Handlebars.compile(loadFile(absolutePath));
}

export function registerPartial(name: string, content: string) {
  Handlebars.registerPartial(name, content);
}

export function registerHelper(
  name: string,
  helper: (...args: any[]) => string | typeof Handlebars.SafeString,
) {
  Handlebars.registerHelper(name, helper);
}

export function loadPartial(name: string, absolutePath: string) {
  registerPartial(name, loadFile(absolutePath));
}

export function loadScript(absolutePath: string): any {
  delete require.cache[absolutePath];
  return require(absolutePath);
}

export function writeAutogenerated(
  absolutePath: string,
  content: string,
  header = defaultAutogenHeader,
) {
  outputFileSync(absolutePath, header + content);
}

export function writeScaffolded(
  absolutePath: string,
  content: string,
  overwrite = false,
  header = defaultScaffoldingHeader,
) {
  (<any>outputFileSync)(absolutePath, header + content, { flag: overwrite ? 'w+' : 'wx+' });
}

export function watch(paths: string[], listener: () => void) {
  watchr.watch({
    catchupDelay: 200,
    listener,
    paths,
  });
}
